#!/bin/sh
#
#  Copyright (c) 2016 European Spallation Source ERIC
#  Copyright (c) 2016 Paul Scherrer Institute
#  Copyright (c) 2016 Jeong Han Lee
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
#
#  Since ESS uses only the IFC 12XX and 14XX with PowerPC archtecture, we don't
#  need to handle xeno, linux-x86, linux-x86_64 and HP, VME, idt, adn, which are
#  defined in the original ioxos_load script.
#  Tuesday, December 20 10:55:22 CET 2016, 
# 
#  
#  author : Jeong Han Lee
#  email  : han.lee@esss.se
#  date   : 
#  version : 0.0.1
#

mode="660"
# We don't have any group definition yet
# 
group="ioc"

declare dev0="pev";
declare xmc1="xmc1_"
declare xmc2="xmc2_"


function check_PREEMPT_RT(){

    local kernel_uname=$(uname -r)
    local rt_patch="preempt-rt";
    local kernel_status=0;
    local realtime_status=$(cat /sys/kernel/realtime)
    
    if test "${kernel_uname#*$rt_patch}" != "${kernel_uname}"; then
	kernel_status=1;
    else
	kernel_status=0;
    fi
    
    if [[ $kernel_status && $realtime_status ]]; then
	printf "This is the realtime patch system, and go further\n";
    else
	printf "This is not the realtime patch systme, and stop here
n";
	exit;
    fi
}

check_PREEMPT_RT

printf "Loading PEV Linux Driver for IOxOX IFC platform\n";

modprobe ${dev0}

printf "Show modinfo %s\n" "${dev0}";
modinfo ${dev0}

if [  $? -ne 0 ]; then
    printf "Please check %s\n" "${dev0}";
    exit 1
fi

printf "Creating devices %s %s %s in /dev/\n" "${dev0}" "${xmc1}" "${xmc2}";

# Get the device major number
# hard-coded name (pev)

major=$(gawk '$2=="pev" {print $1}' /proc/devices)

# Remove all pev{?} devices
rm -f /dev/${dev0}*
rm -f /dev/${xmc1}*
rm -f /dev/${xmc2}*


# Make node ${dev0}, ${xmc1}, ${xmc2} with the major number and the minor number 

# mknod NAME TYPE [MAJOR MINOR]
# TYPE c : character (unbuffered) spefical file

let minor_offset_dev0=0;
let minor_offset_xmc1=16;
let minor_offset_xmc2=48;
let i=0;


printf "Creating %s %s %s devices...\n" "$dev0" "$xmc1" "$xmc2"; 

mknod /dev/${dev0} c ${major} ${minor_offset_dev0}
mknod /dev/${xmc1} c ${major} ${minor_offset_xmc1}
mknod /dev/${xmc2} c ${major} ${minor_offset_xmc2}

for i in `seq 0 15`; do
    minor1=$(($minor_offset_xmc1 + $i)) ;
    minor2=$(($minor_offset_xmc2 + $i)) ;
    mknod /dev/${dev0}${i} c ${major} ${i}
    mknod /dev/${xmc1}${i} c ${major} ${minor1} ;
    mknod /dev/${xmc2}${i} c ${major} ${minor2} ;
done    

# what is this?
mknod /dev/alt9710 c $major 15


chgrp $group /dev/{${dev0}*,${xmc1}*,${xmc2}*}
chmod $mode /dev/{${dev0}*,${xmc1}*,${xmc2}*}


exit
